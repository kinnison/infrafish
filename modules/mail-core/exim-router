inbound_srs:
  driver =    redirect
  senders =   :
  domains =   +local_domains
  # detect inbound bounces which are SRS'd, and decode them
  condition = ${if inbound_srs {$local_part} {SRS_SECRET}}
  data =      $srs_recipient

inbound_srs_failure:
  driver =    redirect
  senders =   :
  domains =   +local_domains
  # detect inbound bounces which look SRS'd but are invalid
  condition = ${if inbound_srs {$local_part} {}}
  allow_fail
  data =      :fail: Invalid SRS recipient address

mailcore_lists:
  driver         = redirect
  allow_fail     = true
  data           = ${expand:${lookup pgsql {select expansion from mailentry where name='${quote_pgsql:$local_part}' and kind='list' and maildomain=(select id from maildomain where domainname='${quote_pgsql:$domain}')} {$value}}}
  senders        = ${addresses:${expand:${lookup pgsql {select expansion from mailentry where name='${quote_pgsql:$local_part}' and kind='list' and maildomain=(select id from maildomain where domainname='${quote_pgsql:$domain}')} {$value}}}}
  qualify_preserve_domain
  errors_to      = ${local_part}-owner@${domain}
  syntax_errors_to = ${local_part}-owner@${domain}
  # We do not add reply-to because it can break existing DKIM for sky.com et al.
  #headers_add    = "Reply-To: <${local_part}@${domain}>"
  # We do add List headers, but right now only List-Id - It's also recommended we hit up Sender
  headers_add    = "List-Id: ${local_part} <${local_part}.${domain}>"
  headers_add    = "Sender: <${local_part}@${domain}>"


mailcore_aliases:
  local_part_suffix = +*
  local_part_suffix_optional
  driver         = redirect
  allow_fail     = true
  data           = ${expand:${lookup pgsql {select expansion from mailentry where name='${quote_pgsql:$local_part}' and kind='alias' and maildomain=(select id from maildomain where domainname='${quote_pgsql:$domain}')} {$value}}}
  #user           = mail
  qualify_preserve_domain

mailcore_delivery:
  local_part_suffix = +*
  local_part_suffix_optional
  driver    = accept
  transport = sieve_virtual
  domains = ${lookup pgsql {select domainname from maildomain where domainname='${quote_pgsql:$domain}'}{$value}}
  local_parts = ${lookup pgsql {select name from mailentry where name='${quote_pgsql:$local_part}' and kind='account' and maildomain=(select id from maildomain where domainname='${quote_pgsql:$domain_data}')}}
  #condition = ${lookup pgsql {select * from mailentry where name='${quote_pgsql:$local_part_data}' and kind='account' and maildomain=(select id from maildomain where domainname='${quote_pgsql:$domain_data}')}{true}{fail}}

mailcore_bouncer:
  local_part_suffix = +*
  local_part_suffix_optional
  driver         = redirect
  allow_fail     = true
  data           = ${expand:${lookup pgsql {select expansion from mailentry where name='${quote_pgsql:$local_part}' and kind='bouncer' and maildomain=(select id from maildomain where domainname='${quote_pgsql:$domain}')} {:fail:$value}}}

mailcore_blackhole:
  local_part_suffix = +*
  local_part_suffix_optional
  driver         = redirect
  allow_fail     = true
  data           = ${expand:${lookup pgsql {select expansion from mailentry where name='${quote_pgsql:$local_part}' and kind='blackhole' and maildomain=(select id from maildomain where domainname='${quote_pgsql:$domain}')} {:blackhole:$value}}}

mailcore_catchall:
  local_part_suffix = +*
  local_part_suffix_optional
  driver         = redirect
  allow_fail     = true
  data           = ${expand:${lookup pgsql {select expansion from mailentry where name='*' and kind='alias' and maildomain=(select id from maildomain where domainname='${quote_pgsql:$domain}')} {$value}}}
  #user           = mail
  qualify_preserve_domain

remote_cunning:
  #debug_print = REMCUN: Checking for $local_part in $domain
  driver      = manualroute
  domains     = ${lookup pgsql {select domainname from maildomain where remotemx is not null and domainname='${quote_pgsql:$domain}'}{$value}}
  transport   = remote_smtp_cunning
  more        = false
  route_data  = ${lookup pgsql {select remotemx from maildomain where domainname='${quote_pgsql:$domain}'}{$value}}

outgoing:
  driver = dnslookup
  domains = ! +local_domains
  transport = ${if eq {$local_part@$domain} \
                      {$original_local_part@$original_domain} \
                {remote_smtp} {remote_forwarded_smtp}}
  no_more
